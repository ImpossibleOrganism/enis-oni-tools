#!/usr/bin/env python

import csv
from pathlib import Path
from typing import Optional, TextIO

import click


@click.command()
@click.argument(
    "in_path",
    metavar="IN_FILE",
    type=click.Path(
        exists=True,
        dir_okay=False,
        path_type=Path,
    ),
)
@click.option(
    "-o",
    "--out-file",
    "out_file",
    type=click.File("w"),
    metavar="OUT_FILE",
    help="The file to write output to; defaults to stdout.",
)
@click.option(
    "-O",
    "--overwrite",
    type=bool,
    is_flag=True,
    help="Overwrite the inputted file.",
)
def main(
    in_path: Path,
    out_file: Optional[TextIO],
    overwrite: bool,
):
    """Add spaces to align the CSV file IN_FILE so that every column starts on the same
    line."""
    # --- Input Validation ---
    if overwrite and out_file:
        raise click.UsageError(
            "You cannot use both --overwrite and specify an output path."
        )

    # --- Read input CSV ---
    with in_path.open("r") as in_file:
        rows = list(csv.reader(in_file))

    # --- Parse CSV ---
    row_length = max(map(len, rows))  # Get the total number of rows
    col_lengths = [0] * row_length  # We want the longest of each column
    for row in rows:
        # Strip whitespace
        for index, cell in enumerate(row):
            row[index] = cell.strip()
            col_lengths[index] = max(col_lengths[index], len(row[index]))

        # Pad each row
        row.extend([""] * (row_length - len(row)))

    # --- Output Formatted CSV ---
    if overwrite:
        out_file = in_path.open("w")

    for row in rows:
        print(
            "".join(
                f"{f"{cell},":<{length + 2}}" for cell, length in zip(row, col_lengths)
            )
            .strip()
            .removesuffix(","),
            file=out_file,
        )

    if out_file:
        out_file.close()


if __name__ == "__main__":
    main()
